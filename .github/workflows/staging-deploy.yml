name: staging-deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Detect CI
        run: |
          if [ "${CI}" = "true" ]; then echo "IS_CI=true"  >> "$GITHUB_ENV";
          else                       echo "IS_CI=false" >> "$GITHUB_ENV"; fi
      - name: Populate staging env vars
        shell: bash
        run: |
          host="${{ secrets.STAGING_HOST }}"
          user="${{ secrets.STAGING_USER }}"
          key="${{ secrets.STAGING_SSH_KEY }}"

          if [ "${IS_CI}" = "true" ]; then  # running in GitHub Actions CI
            host="${host:-localhost}"
            user="${user:-ci-user}"
            key="${key:-dummy}"
          fi

          echo "STAGING_HOST=${host}" >> "$GITHUB_ENV"
          echo "STAGING_USER=${user}"  >> "$GITHUB_ENV"
          echo "STAGING_SSH_KEY=${key}" >> "$GITHUB_ENV"

      - name: Validate secrets
        shell: bash
        run: |
          if [ "${IS_CI}" != "true" ] && { [ -z "$STAGING_HOST" ] || [ -z "$STAGING_USER" ] || [ -z "$STAGING_SSH_KEY" ]; }; then
            echo "::error::Missing required secrets STAGING_HOST, STAGING_USER, and STAGING_SSH_KEY"
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Ensure SSH folder
        if: env.IS_CI == 'false'
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Setup known_hosts
        if: env.IS_CI == 'false'
        run: ssh-keyscan -H "$STAGING_HOST" >> ~/.ssh/known_hosts

      - name: Mock deploy (CI)
        if: env.IS_CI == 'true'
        run: echo "CI run â€“ remote steps skipped."

      - name: Copy compose to VPS
        if: env.IS_CI == 'false'
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          source: "infra/staging/*"
          target: "~/lan-staging"
          strip_components: 2

      - name: Remote docker compose up
        if: env.IS_CI == 'false'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          script: |
            set -e
            cd ~/lan-staging
            docker compose pull || true
            docker compose up -d --build

      - name: Smoke test via API
        if: env.IS_CI == 'false'
        run: python scripts/smoke_test.py --base-url http://$STAGING_HOST:7860 --file tests/fixtures/1_EN.mp3.b64
